<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"

       default-init-method="initialize"
       default-destroy-method="destroy">

    <!-- Use this file to define any custom beans needed globally. -->

    <!--
    Bean for storage of data in a PostgreSQL database. Used for
    persistent IDs on the one hand and user consent data on the other hand.
    We rely Apache Commons DBCP for connection pooling, as it comes
    bundled with Tomcat 7.
    -->
    <bean id="shibboleth.PostgreSQLDataSource"
          class="org.apache.commons.dbcp.BasicDataSource"
          p:driverClassName="org.postgresql.Driver"
          p:url="jdbc:postgresql://localhost/shibboleth"
          p:username="shibboleth"
          p:password="%{psql.password}"
          p:maxWait="15000"
          p:validationQuery="select 1"
          p:validationQueryTimeout="5" />

    <!--
    Glue which is needed for attaching a PostgreSQL data source
    via JPA (Java Persistence API) and Hibernate ORM, needed for
    the "storagerecords" table.
    -->
    <bean id="shibboleth.JPAStorageService"
          class="org.opensaml.storage.impl.JPAStorageService"
          p:cleanupInterval="%{idp.storage.cleanupInterval:PT10M}"
          c:factory-ref="shibboleth.JPAStorageService.entityManagerFactory" />

    <bean id="shibboleth.JPAStorageService.entityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="packagesToScan" value="org.opensaml.storage.impl"/>
        <property name="dataSource" ref="shibboleth.PostgreSQLDataSource"/>
        <property name="jpaVendorAdapter" ref="shibboleth.JPAStorageService.JPAVendorAdapter"/>
        <property name="jpaDialect">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaDialect" />
        </property>
    </bean>

    <bean id="shibboleth.JPAStorageService.JPAVendorAdapter"
          class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"
          p:generateDdl="true"
          p:database="POSTGRESQL"
          p:databasePlatform="org.hibernate.dialect.PostgreSQL9Dialect" />

    <!--
    A custom HTTP client which is used for retrieving HTTPResources, such as
    the attribute filter retrieved from the AAI Resource Registry. Note that
    HTTPMetadataProviders use their own HttpClient, the following settings
    only apply to HTTP*Resource* downloads.

    To allow proxy configuration via idp.properties, we create two flavors
    (w/o and w/ proxy), and in both cases configure an in-memory cache
    to enable support for conditional GETs, see also
    https://issues.shibboleth.net/jira/browse/JSE-7.
    -->
    <bean id="shibboleth.HttpClient"
          factory-bean="shibboleth.HttpClientBuilder"
          factory-method="build" />

    <bean id="shibboleth.ProxyHttpClient"
          factory-bean="shibboleth.ProxyHttpClientBuilder"
          factory-method="build" />

    <bean id="shibboleth.HttpClientBuilder"
          class="org.apache.http.impl.client.cache.CachingHttpClientBuilder"
          p:CacheConfig-ref="shibboleth.HttpCacheConfig"
          p:HostnameVerifier-ref="shibboleth.HttpsStrictHostnameVerifier"
          p:UserAgent-ref="shibboleth.HttpUserAgentString" />

    <bean id="shibboleth.ProxyHttpClientBuilder"
          class="org.apache.http.impl.client.cache.CachingHttpClientBuilder"
          p:CacheConfig-ref="shibboleth.HttpCacheConfig"
          p:Proxy-ref="shibboleth.HttpProxy"
          p:HostnameVerifier-ref="shibboleth.HttpsStrictHostnameVerifier"
          p:UserAgent-ref="shibboleth.HttpUserAgentString" />

    <bean id="shibboleth.HttpCacheConfig"
          factory-bean="shibboleth.HttpCacheConfigBuilder"
          factory-method="build" />

    <!-- default cache size: max. 10 entries with 10 Mbytes each -->
    <bean id="shibboleth.HttpCacheConfigBuilder"
          class="org.apache.http.impl.client.cache.CacheConfig.Builder"
          p:MaxCacheEntries="10"
          p:MaxObjectSize="10485760" />

    <bean id="shibboleth.HttpProxy"
          class="org.apache.http.HttpHost"
          c:hostname="%{idp.http.proxyhost:.}"
          c:port="%{idp.http.proxyport:8080}" />

    <bean id="shibboleth.HttpsStrictHostnameVerifier"
          class="org.apache.http.conn.ssl.StrictHostnameVerifier" />

    <bean id="shibboleth.HttpUserAgentString"
          class="java.lang.String"
          c:_0="#{ 'ShibbolethIdp/' + T(net.shibboleth.idp.Version).getVersion() + ' OpenSAML/' + T(org.opensaml.core.Version).getVersion() }" />

    <!--
    Algorithm whitelists and blacklists that override or merge with library defaults. Normally you can leave
    these empty or commented and use the system defaults, but you can override those defaults using these lists.
    Each <value> element is an algorithm URI, or you can use <util:constant> elements in place of literal values.
    -->

    <!--
    <util:list id="shibboleth.SignatureWhitelist">
    </util:list>

    <util:list id="shibboleth.SignatureBlacklist">
    </util:list>

    <util:list id="shibboleth.EncryptionWhitelist">
    </util:list>

    <util:list id="shibboleth.EncryptionBlacklist">
    </util:list>
    -->

</beans>
